const express = require("express");
const app = express();
const port = 3000;
app.use(express.json());

function handleFirstRequest(req, res) {
  var counter = req.query.counter;
  var calculatedSum = calculateSum(counter);
  var answer = "the sum is " + calculatedSum;
  res.send(answer);
}

function createUser(req, res) {
  const userData = req.body;

  // Validate required fields (username and email, for example)
  if (!userData || !userData.username || !userData.email) {
    return res.status(400).send("Username and email are required");
  }

  // Check if the username is already taken
  const usernameTaken = users.some(
    (user) => user.username === userData.username
  );
  if (usernameTaken) {
    return res.status(409).send("Username is already taken");
  }

  // Generate a new user ID (this is just a simple example, in a real application, you would typically use a database with auto-incrementing IDs)
  const newUserId = users.length + 1;

  // Create the new user object
  const newUser = {
    id: newUserId,
    username: userData.username,
    email: userData.email,
  };

  // Add the new user to the array
  users.push(newUser);

  // Send a response back to the client
  res.status(201).json(newUser);
}

let users = [
  { id: 1, username: "john_doe", email: "john@example.com" },
  { id: 2, username: "jane_smith", email: "jane@example.com" },
];

function updateUser(req, res) {
  const userID = req.params.id;
  const updatedUserData = req.body;

  //find user with specified id
  const userToUpdate = users.find((user) => user.id === parseInt(userID));

  if (!userToUpdate) {
    return res.status(404).send("User not found");
  }
  userToUpdate.username = updatedUserData.username || userToUpdate.username;
  userToUpdate.email = updatedUserData.email || userToUpdate.email;
  res.send("User updated successfully");
}

function deleteUser(req, res) {
  const userId = req.params.id;

  //Find index of the user with the secified ID
  const userIndex = users.find((user) => user.id === parseInt(userId));
  if (!userIndex) {
    return res.status(404).send("User not found");
  }
  users.splice(userIndex, 1);
  res.send("User deleted successfully");
}

app.get("/handleSum", handleFirstRequest);
app.post("/createUser", createUser);
app.put("/updateUser/:id", updateUser);
app.delete("/deleteUser/:id", deleteUser);

function started() {
  console.log(`Example app listening on port ${port}`);
}

app.listen(port, started);

function calculateSum(counter) {
  var sum = 0;
  for (var i = 1; i <= counter; i++) {
    sum = sum + i;
  }
  return sum;
}
